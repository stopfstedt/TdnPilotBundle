<?php

{% block namespace_block %}
namespace {{ namespace }}\Entity\Manager;
{% endblock %}

{% block use_statements %}
use Doctrine\Bundle\DoctrineBundle\Registry;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Id\AssignedGenerator;
use {{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity }}Interface;
{% endblock use_statements %}

/**
{% block phpdoc_class_header %}
 * Class {{ entity }}Manager
 * @package {{ namespace }}\Entity\Manager{{ entity_namespace ? '\\' ~ entity_namespace : '' }}
{% endblock phpdoc_class_header %}
 */
{% block class_definition %}
class {{ entity }}Manager implements {{ entity }}ManagerInterface
{% endblock class_definition %}
{
{% block class_body %}
    /**
     * @var EntityManager
     */
    protected $em;

    /**
     * @var EntityRepository
     */
    protected $repository;

    /**
     * @var string
     */
    protected $class;

    /**
     * @param Registry $em
     * @param string $class
     */
    public function __construct(Registry $em, $class)
    {
        $this->em         = $em->getManagerForClass($class);
        $this->class      = $class;
        $this->repository = $em->getRepository($class);
    }

    /**
     * @param array $criteria
     * @param array $orderBy
     *
     * @return {{ entity }}Interface
     */
    public function find{{ entity }}By(
        array $criteria,
        array $orderBy = null
    ) {
        return $this->repository->findOneBy($criteria, $orderBy);
    }

    /**
     * @param array $criteria
     * @param array $orderBy
     * @param integer $limit
     * @param integer $offset
     *
     * @return ArrayCollection|{{ entity }}Interface[]
     */
    public function find{{ entity|pluralize }}By(
        array $criteria,
        array $orderBy = null,
        $limit = null,
        $offset = null
    ) {
        return $this->repository->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * @param {{ entity }}Interface ${{ entity|lowerfirst }}
     * @param bool $andFlush
     * @param bool $forceId
     */
    public function update{{ entity }}(
        {{ entity }}Interface ${{ entity|lowerfirst }},
        $andFlush = true,
        $forceId  = false
    ) {
        $this->em->persist(${{ entity|lowerfirst }});

        if ($forceId) {
            $metadata = $this->em->getClassMetaData(get_class(${{ entity|lowerfirst }}));
            $metadata->setIdGenerator(new AssignedGenerator());
        }

        if ($andFlush) {
            $this->em->flush();
        }
    }

    /**
     * @param {{ entity }}Interface ${{ entity|lowerfirst }}
     */
    public function delete{{ entity }}(
        {{ entity }}Interface ${{ entity|lowerfirst }}
    ) {
        $this->em->remove(${{ entity|lowerfirst }});
        $this->em->flush();
    }

    /**
     * @return string
     */
    public function getClass()
    {
        return $this->class;
    }

    /**
     * @return {{ entity }}Interface
     */
    public function create{{ entity }}({{ entity_construct_params }})
    {
        $class = $this->getClass();
        return new $class({{ construct_params }});
    }
{% endblock class_body %}
}
