{% block extras_methods %}

    /**
     * @param {{ entity }}Interface ${{ entity|lowerfirst }}
     * @param array $parameters
     * @param string $method
     * @throws InvalidFormException when invalid form data is passed in.
     *
     * @return {{ entity }}Interface
     */
    protected function processForm(
        {{ entity }}Interface ${{ entity|lowerfirst }},
        array $parameters,
        $method = "PUT"
    ) {
        $form = $this->formFactory->create(
            new {{ entity }}Type(),
            ${{ entity|lowerfirst }},
            array('method' => $method)
        );

        $form->submit($parameters, 'PATCH' !== $method);

        if ($form->isValid()) {
            ${{ entity|lowerfirst }} = $form->getData();
            $this->update{{ entity }}(
                ${{ entity|lowerfirst }},
                true,
                ('PUT' === $method || 'PATCH' === $method)
            );

            return ${{ entity|lowerfirst }};
        }

        throw new InvalidFormException('Invalid submitted data', $form);
    }
{% endblock extras_methods %}
